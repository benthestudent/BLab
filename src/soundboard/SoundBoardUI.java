package soundboard;



import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.DefaultListModel;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.jdom2.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Babyc
 */
public class SoundBoardUI extends javax.swing.JFrame{
    private Show currentShow;
    private boolean playing;
    private int currentCueIndex;
    private int currentCuePlaying;
    
    /**
     * Creates new form SoundBoardUI
     */
    public SoundBoardUI() {
        playing = false;
        currentCueIndex = 0;
        currentCuePlaying = 0;
       Action spaceAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println(String.valueOf(e));
                if(!playing)
               {
                play();
               }else
               {
                   stop();
               }
                
            }
        };

        initComponents();
        InputMap iMap = pnlMainContainer.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
       ActionMap aMap = pnlMainContainer.getActionMap();
       iMap.put(KeyStroke.getKeyStroke("SPACE"), "space");
       aMap.put("space", spaceAction);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editPane = new javax.swing.JTabbedPane();
        pnlMainContainer = new javax.swing.JPanel();
        btnSaveVolume = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCueList = new javax.swing.JTable();
        volumeSlider = new javax.swing.JSlider();
        lblCueVolume = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuNewProject = new javax.swing.JMenuItem();
        menuOpenProject = new javax.swing.JMenuItem();
        menuAddCue = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuRemove = new javax.swing.JMenuItem();
        mnuChangeName = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BLab");
        setMaximumSize(new java.awt.Dimension(400, 400));

        btnSaveVolume.setText("Save");
        btnSaveVolume.setEnabled(false);

        btnLast.setText("Last");
        btnLast.setEnabled(false);
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnPlay.setText("Play");
        btnPlay.setEnabled(false);
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnNext.setText("Next");
        btnNext.setEnabled(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        tblCueList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cues", "Length"
            }
        ));
        jScrollPane2.setViewportView(tblCueList);

        volumeSlider.setValue(100);
        volumeSlider.setEnabled(false);
        volumeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volumeSliderStateChanged(evt);
            }
        });

        lblCueVolume.setText("Cue Volume:");

        javax.swing.GroupLayout pnlMainContainerLayout = new javax.swing.GroupLayout(pnlMainContainer);
        pnlMainContainer.setLayout(pnlMainContainerLayout);
        pnlMainContainerLayout.setHorizontalGroup(
            pnlMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(pnlMainContainerLayout.createSequentialGroup()
                        .addComponent(btnLast)
                        .addGap(18, 18, 18)
                        .addComponent(btnPlay)
                        .addGap(18, 18, 18)
                        .addComponent(btnStop)
                        .addGap(18, 18, 18)
                        .addComponent(btnNext)
                        .addGap(88, 88, 88)
                        .addComponent(lblCueVolume)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(volumeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlMainContainerLayout.setVerticalGroup(
            pnlMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLast)
                        .addComponent(btnPlay)
                        .addComponent(btnStop)
                        .addComponent(btnNext)
                        .addComponent(lblCueVolume))
                    .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaveVolume))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        lblCueVolume.getAccessibleContext().setAccessibleName("lblCueVolume");

        jMenu1.setText("File");

        menuNewProject.setText("New Project");
        menuNewProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewProjectActionPerformed(evt);
            }
        });
        jMenu1.add(menuNewProject);

        menuOpenProject.setText("Open Project");
        menuOpenProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenProjectActionPerformed(evt);
            }
        });
        jMenu1.add(menuOpenProject);

        menuAddCue.setText("Add Cue");
        menuAddCue.setEnabled(false);
        menuAddCue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddCueActionPerformed(evt);
            }
        });
        jMenu1.add(menuAddCue);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        mnuRemove.setText("Remove Cue");
        mnuRemove.setEnabled(false);
        mnuRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRemoveActionPerformed(evt);
            }
        });
        jMenu2.add(mnuRemove);

        mnuChangeName.setText("Change Cue Name");
        mnuChangeName.setEnabled(false);
        mnuChangeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuChangeNameActionPerformed(evt);
            }
        });
        jMenu2.add(mnuChangeName);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editPane, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(pnlMainContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMainContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editPane, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                .addContainerGap())
        );

        editPane.getAccessibleContext().setAccessibleName("editPane");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void handleKey(KeyEvent e)
    {
        if(e.getKeyCode() == KeyEvent.VK_SPACE)
        {
            this.play();
        }
    }
    private void menuNewProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewProjectActionPerformed
        //default title and icon
    JFileChooser dirChooser = new JFileChooser(); 
    dirChooser.setCurrentDirectory(new java.io.File("."));
    dirChooser.setDialogTitle("Select A Folder To Save Your Project");
    dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    dirChooser.setAcceptAllFileFilterUsed(false);
    //    
    if (dirChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
        String projectName = JOptionPane.showInputDialog(this, "Enter Project Name: ");
        currentShow = new Show();
        currentShow.createShow(projectName, dirChooser.getSelectedFile().toString());
        menuAddCue.setEnabled(true);
    }
        
    }//GEN-LAST:event_menuNewProjectActionPerformed

    private void menuOpenProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenProjectActionPerformed
        currentShow = new Show();
        final JFileChooser filePrompt = new JFileChooser(); //CHANGE FOR FINAL PRODUCT
        filePrompt.setFileFilter(new FileNameExtensionFilter("XML Files Only", "xml"));
        boolean open = false;
        while(!open){
        int returnVal = filePrompt.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = filePrompt.getSelectedFile();
            try (FileInputStream fis = new FileInputStream(file)) {
                open = currentShow.openShow(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SoundBoardUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(SoundBoardUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JDOMException ex) {
                Logger.getLogger(SoundBoardUI.class.getName()).log(Level.SEVERE, null, ex);
            }
             menuAddCue.setEnabled(true);
            this.updateDisplay();
        }
        else if (returnVal == JFileChooser.CANCEL_OPTION){
            System.out.println("Cancelled");
            open = true;
        }
        }
    }//GEN-LAST:event_menuOpenProjectActionPerformed

    private void menuAddCueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddCueActionPerformed
        final JFileChooser soundFilePrompt = new JFileChooser();
        soundFilePrompt.setFileFilter(new FileNameExtensionFilter("Audio only", "wav", "mp3", "aiff"));
        int returnVal = soundFilePrompt.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = soundFilePrompt.getSelectedFile();
            try (FileInputStream fis = new FileInputStream(file)) {
                
                JTextField cueNameField = new JTextField("Enter Cue Name Here");
                JLabel lblCueIndex = new JLabel("Cue Index (starting at 0. leave blank to append to end)");
                JTextField cueIndexField = new JTextField(3);
                
                JPanel cueDialogPanel =  new JPanel();
                cueDialogPanel.add(cueNameField);
                cueDialogPanel.add(lblCueIndex);
                cueDialogPanel.add(cueIndexField);
                
                int result = JOptionPane.showConfirmDialog(null, cueDialogPanel, 
               "Please Enter Cue Information", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION)
                {
                    Cue newCue = new Cue(cueNameField.getText(), file, -1); 
                    if(cueIndexField.getText().equals(""))
                    {
                        currentShow.addCue(newCue);  
                    }
                    else
                    {
                        currentShow.addCue(newCue, Integer.parseInt(cueIndexField.getText()));
                    }
                    
                }
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SoundBoardUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(SoundBoardUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.updateDisplay();
    }//GEN-LAST:event_menuAddCueActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
       pnlMainContainer.requestFocus();
       this.play();
    }//GEN-LAST:event_btnPlayActionPerformed
    private void play()
    {
    Cue currentCue = this.getCurrentCue();
        if(!playing)
        {
            currentCue.play();
            btnPlay.setText("Pause");
            playing = true;
            currentCuePlaying = currentCueIndex;
            if(currentShow.size() > currentCueIndex + 1)
            {
            currentCueIndex++;
            }
            this.changeRows(currentCueIndex, currentCuePlaying);
        }
        else
        {
            currentShow.getCueAt(currentCuePlaying).pause();
            String name;
            name = currentShow.getCueAt(currentCuePlaying).getName();
            tblCueList.setValueAt(name, (currentCuePlaying), 0);
            btnPlay.setText("Play");
            currentCueIndex = currentCuePlaying;
            this.changeRows(currentCueIndex);
            playing = false;
        }
    }
    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        pnlMainContainer.requestFocus();
        stop();
    }//GEN-LAST:event_btnStopActionPerformed
    private void stop()
    {
        if (playing)
        {
            currentShow.stopAll();
            btnPlay.setText("Play");
            playing = false;
            String name;
            name = currentShow.getCueAt(currentCuePlaying).getName();
            tblCueList.setValueAt(name, (currentCuePlaying), 0);
        }
    }
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        updateCurrentCueIndex();
        if(currentShow.size() > currentCueIndex + 1)
        {
            currentCueIndex++;
        }
    
        this.changeRows(currentCueIndex);
        pnlMainContainer.requestFocus();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        updateCurrentCueIndex();
        if(currentCueIndex > 0)
        {
            currentCueIndex--;
        }
        this.changeRows(currentCueIndex);
        pnlMainContainer.requestFocus();
    }//GEN-LAST:event_btnLastActionPerformed

    private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeSliderStateChanged
        currentShow.editCueVolume(currentCuePlaying, volumeSlider.getValue());
        currentShow.getCueAt(currentCuePlaying).setVolume(volumeSlider.getValue());
        pnlMainContainer.requestFocus();
    }//GEN-LAST:event_volumeSliderStateChanged

    private void mnuRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRemoveActionPerformed
        updateCurrentCueIndex();
        currentShow.removeCue(currentCueIndex);
        updateDisplay();
    }//GEN-LAST:event_mnuRemoveActionPerformed

    private void mnuChangeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuChangeNameActionPerformed
        JTextField cueNameField = new JTextField("Enter New Name Here");
        JPanel cueDialogPanel =  new JPanel();
        cueDialogPanel.add(cueNameField);        
        int result = JOptionPane.showConfirmDialog(null, cueDialogPanel, 
               "Please Enter Cue Information", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION)
            { 
            currentShow.editCueName(tblCueList.getSelectedRows()[0], cueNameField.getText());
            tblCueList.setValueAt(cueNameField.getText(), (tblCueList.getSelectedRows()[0]), 0); 
            currentShow.getCueAt(tblCueList.getSelectedRows()[0]).setName(cueNameField.getText());            
            }

        pnlMainContainer.requestFocus();
    }//GEN-LAST:event_mnuChangeNameActionPerformed
    
    private void updateCurrentCueIndex()
    {
        currentCueIndex = tblCueList.getSelectedRows()[0];
    }
    
    private Cue getCurrentCue()
    {
        Cue currentCue = null;
        updateCurrentCueIndex();
        currentCue = currentShow.getCueAt(tblCueList.getSelectedRows()[0]);
        return currentCue;
    }    
    
    private void changeRows(int index)
    {
        if(index < currentShow.size())
        {
        tblCueList.clearSelection();
        tblCueList.addRowSelectionInterval(index, index);
        }
    }
    
    private void changeRows(int index, int playingIndex)
    {
        if(index < currentShow.size())
        {
        tblCueList.clearSelection();
        String name;
        name = currentShow.getCueAt(playingIndex).getName() + " - playing";
        tblCueList.setValueAt(name, (playingIndex), 0);
        tblCueList.addRowSelectionInterval(index, index);
        }
    }
    
    private void updateDisplay()
    {
        
       tblCueList.setModel(currentShow.getCueList());
       if(currentShow.size() > 0)
        {
            btnPlay.setEnabled(true);
            volumeSlider.setEnabled(true);
            btnStop.setEnabled(true);
            mnuChangeName.setEnabled(true);
            mnuRemove.setEnabled(true);
            tblCueList.clearSelection();
            tblCueList.addRowSelectionInterval(currentCueIndex, currentCueIndex);
            if(currentShow.size() > 1)
            {
                btnNext.setEnabled(true);
                btnLast.setEnabled(true);
            }
        }
    }
    private static JTable getNewRenderedTable(final JTable table) {
        table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
                String status = (String)table.getModel().getValueAt(row, col);
                if ("active".equals(status)) {
                    setBackground(Color.BLACK);
                    setForeground(Color.WHITE);
                } else {
                    setBackground(table.getBackground());
                    setForeground(table.getForeground());
                }       
                return this;
            }   
        });
        return table;
    }
    /**
     * @param args the command line arguments
     */
    public void main() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SoundBoardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SoundBoardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SoundBoardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SoundBoardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                KeyListener listener;
                listener = new KeyListener(){
                    @Override
                    public void keyTyped(KeyEvent e) {
                        //handleKey(e);
                    }

                    @Override
                    public void keyPressed(KeyEvent e) {
//                        handleKey(e);
                    }

                    @Override
                    public void keyReleased(KeyEvent e) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }
                    
                };
               SoundBoardUI sbUI = new SoundBoardUI();
                sbUI.setVisible(true);
                sbUI.requestFocus();
                sbUI.addKeyListener(listener);
            }

           

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnSaveVolume;
    private javax.swing.JButton btnStop;
    private javax.swing.JTabbedPane editPane;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCueVolume;
    private javax.swing.JMenuItem menuAddCue;
    private javax.swing.JMenuItem menuNewProject;
    private javax.swing.JMenuItem menuOpenProject;
    private javax.swing.JMenuItem mnuChangeName;
    private javax.swing.JMenuItem mnuRemove;
    private javax.swing.JPanel pnlMainContainer;
    private javax.swing.JTable tblCueList;
    private javax.swing.JSlider volumeSlider;
    // End of variables declaration//GEN-END:variables
}
